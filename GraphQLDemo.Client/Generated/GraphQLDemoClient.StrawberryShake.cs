// <auto-generated/>
#nullable enable

namespace GraphQLDemo.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CreateCourseResult : global::System.IEquatable<CreateCourseResult>, ICreateCourseResult
    {
        public CreateCourseResult(global::GraphQLDemo.Client.ICreateCourse_CreateCourse? createCourse)
        {
            CreateCourse = createCourse;
        }

        public global::GraphQLDemo.Client.ICreateCourse_CreateCourse? CreateCourse { get; }

        public virtual global::System.Boolean Equals(CreateCourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CreateCourse is null && other.CreateCourse is null) || CreateCourse != null && CreateCourse.Equals(other.CreateCourse)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CreateCourse != null)
                {
                    hash ^= 397 * CreateCourse.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CreateCourse_CreateCourse_CourseNames : global::System.IEquatable<CreateCourse_CreateCourse_CourseNames>, ICreateCourse_CreateCourse_CourseNames
    {
        public CreateCourse_CreateCourse_CourseNames(global::System.Guid id, global::System.String? courseName, global::System.Int32 courseFee)
        {
            Id = id;
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }

        public virtual global::System.Boolean Equals(CreateCourse_CreateCourse_CourseNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName)) && CourseFee == other.CourseFee;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCourse_CreateCourse_CourseNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                hash ^= 397 * CourseFee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICreateCourseResult
    {
        public global::GraphQLDemo.Client.ICreateCourse_CreateCourse? CreateCourse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICreateCourse_CreateCourse
    {
        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICreateCourse_CreateCourse_CourseNames : ICreateCourse_CreateCourse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class DeleteCourseResult : global::System.IEquatable<DeleteCourseResult>, IDeleteCourseResult
    {
        public DeleteCourseResult(global::System.Boolean deleteCourse)
        {
            DeleteCourse = deleteCourse;
        }

        public global::System.Boolean DeleteCourse { get; }

        public virtual global::System.Boolean Equals(DeleteCourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DeleteCourse == other.DeleteCourse);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteCourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DeleteCourse.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IDeleteCourseResult
    {
        public global::System.Boolean DeleteCourse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class UpdateCourseResult : global::System.IEquatable<UpdateCourseResult>, IUpdateCourseResult
    {
        public UpdateCourseResult(global::GraphQLDemo.Client.IUpdateCourse_UpdateCourse? updateCourse)
        {
            UpdateCourse = updateCourse;
        }

        public global::GraphQLDemo.Client.IUpdateCourse_UpdateCourse? UpdateCourse { get; }

        public virtual global::System.Boolean Equals(UpdateCourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UpdateCourse is null && other.UpdateCourse is null) || UpdateCourse != null && UpdateCourse.Equals(other.UpdateCourse)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UpdateCourse != null)
                {
                    hash ^= 397 * UpdateCourse.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class UpdateCourse_UpdateCourse_CourseNames : global::System.IEquatable<UpdateCourse_UpdateCourse_CourseNames>, IUpdateCourse_UpdateCourse_CourseNames
    {
        public UpdateCourse_UpdateCourse_CourseNames(global::System.Guid id, global::System.String? courseName, global::System.Int32 courseFee)
        {
            Id = id;
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }

        public virtual global::System.Boolean Equals(UpdateCourse_UpdateCourse_CourseNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName)) && CourseFee == other.CourseFee;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCourse_UpdateCourse_CourseNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                hash ^= 397 * CourseFee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IUpdateCourseResult
    {
        public global::GraphQLDemo.Client.IUpdateCourse_UpdateCourse? UpdateCourse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IUpdateCourse_UpdateCourse
    {
        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IUpdateCourse_UpdateCourse_CourseNames : IUpdateCourse_UpdateCourse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourseResult : global::System.IEquatable<PaginatedCourseResult>, IPaginatedCourseResult
    {
        public PaginatedCourseResult(global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses? paginatedCourses)
        {
            PaginatedCourses = paginatedCourses;
        }

        public global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses? PaginatedCourses { get; }

        public virtual global::System.Boolean Equals(PaginatedCourseResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PaginatedCourses is null && other.PaginatedCourses is null) || PaginatedCourses != null && PaginatedCourses.Equals(other.PaginatedCourses)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PaginatedCourseResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PaginatedCourses != null)
                {
                    hash ^= 397 * PaginatedCourses.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourse_PaginatedCourses_PaginatedCoursesConnection : global::System.IEquatable<PaginatedCourse_PaginatedCourses_PaginatedCoursesConnection>, IPaginatedCourse_PaginatedCourses_PaginatedCoursesConnection
    {
        public PaginatedCourse_PaginatedCourses_PaginatedCoursesConnection(global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_Nodes?>? nodes, global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_PageInfo pageInfo, global::System.Int32 totalCount)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
            TotalCount = totalCount;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_PageInfo PageInfo { get; }

        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(PaginatedCourse_PaginatedCourses_PaginatedCoursesConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo) && TotalCount == other.TotalCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PaginatedCourse_PaginatedCourses_PaginatedCoursesConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourse_PaginatedCourses_Nodes_CourseNames : global::System.IEquatable<PaginatedCourse_PaginatedCourses_Nodes_CourseNames>, IPaginatedCourse_PaginatedCourses_Nodes_CourseNames
    {
        public PaginatedCourse_PaginatedCourses_Nodes_CourseNames(global::System.Guid id, global::System.String? courseName, global::System.Int32 courseFee)
        {
            Id = id;
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }

        public virtual global::System.Boolean Equals(PaginatedCourse_PaginatedCourses_Nodes_CourseNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName)) && CourseFee == other.CourseFee;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PaginatedCourse_PaginatedCourses_Nodes_CourseNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                hash ^= 397 * CourseFee.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourse_PaginatedCourses_PageInfo_PageInfo : global::System.IEquatable<PaginatedCourse_PaginatedCourses_PageInfo_PageInfo>, IPaginatedCourse_PaginatedCourses_PageInfo_PageInfo
    {
        public PaginatedCourse_PaginatedCourses_PageInfo_PageInfo(global::System.String? startCursor, global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage)
        {
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        public virtual global::System.Boolean Equals(PaginatedCourse_PaginatedCourses_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor))) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor)) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PaginatedCourse_PaginatedCourses_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IPaginatedCourseResult
    {
        public global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses? PaginatedCourses { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IPaginatedCourse_PaginatedCourses
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_Nodes?>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_PageInfo PageInfo { get; }

        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IPaginatedCourse_PaginatedCourses_PaginatedCoursesConnection : IPaginatedCourse_PaginatedCourses
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IPaginatedCourse_PaginatedCourses_Nodes
    {
        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IPaginatedCourse_PaginatedCourses_Nodes_CourseNames : IPaginatedCourse_PaginatedCourses_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IPaginatedCourse_PaginatedCourses_PageInfo
    {
        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IPaginatedCourse_PaginatedCourses_PageInfo_PageInfo : IPaginatedCourse_PaginatedCourses_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourseNameByIdResult : global::System.IEquatable<GetCourseNameByIdResult>, IGetCourseNameByIdResult
    {
        public GetCourseNameByIdResult(global::GraphQLDemo.Client.IGetCourseNameById_CourseNameById? courseNameById)
        {
            CourseNameById = courseNameById;
        }

        public global::GraphQLDemo.Client.IGetCourseNameById_CourseNameById? CourseNameById { get; }

        public virtual global::System.Boolean Equals(GetCourseNameByIdResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CourseNameById is null && other.CourseNameById is null) || CourseNameById != null && CourseNameById.Equals(other.CourseNameById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseNameByIdResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CourseNameById != null)
                {
                    hash ^= 397 * CourseNameById.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourseNameById_CourseNameById_CourseNames : global::System.IEquatable<GetCourseNameById_CourseNameById_CourseNames>, IGetCourseNameById_CourseNameById_CourseNames
    {
        public GetCourseNameById_CourseNameById_CourseNames(global::System.String? courseName, global::System.Int32 courseFee)
        {
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }

        public virtual global::System.Boolean Equals(GetCourseNameById_CourseNameById_CourseNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName))) && CourseFee == other.CourseFee;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourseNameById_CourseNameById_CourseNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                hash ^= 397 * CourseFee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCourseNameByIdResult
    {
        public global::GraphQLDemo.Client.IGetCourseNameById_CourseNameById? CourseNameById { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCourseNameById_CourseNameById
    {
        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCourseNameById_CourseNameById_CourseNames : IGetCourseNameById_CourseNameById
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCoursesResult : global::System.IEquatable<GetCoursesResult>, IGetCoursesResult
    {
        public GetCoursesResult(global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.IGetCourses_Courses?>? courses)
        {
            Courses = courses;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.IGetCourses_Courses?>? Courses { get; }

        public virtual global::System.Boolean Equals(GetCoursesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Courses, other.Courses));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCoursesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Courses != null)
                {
                    foreach (var Courses_elm in Courses)
                    {
                        if (Courses_elm != null)
                        {
                            hash ^= 397 * Courses_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourses_Courses_CourseType : global::System.IEquatable<GetCourses_Courses_CourseType>, IGetCourses_Courses_CourseType
    {
        public GetCourses_Courses_CourseType(global::System.Guid id, global::System.String? courseName, global::System.Int32 courseFee)
        {
            Id = id;
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }

        public virtual global::System.Boolean Equals(GetCourses_Courses_CourseType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName)) && CourseFee == other.CourseFee;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCourses_Courses_CourseType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                hash ^= 397 * CourseFee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCoursesResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.IGetCourses_Courses?>? Courses { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCourses_Courses
    {
        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCourses_Courses_CourseType : IGetCourses_Courses
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetInstructionsResult : global::System.IEquatable<GetInstructionsResult>, IGetInstructionsResult
    {
        public GetInstructionsResult(global::System.String? instruction)
        {
            Instruction = instruction;
        }

        public global::System.String? Instruction { get; }

        public virtual global::System.Boolean Equals(GetInstructionsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Instruction is null && other.Instruction is null) || Instruction != null && Instruction.Equals(other.Instruction)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetInstructionsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Instruction != null)
                {
                    hash ^= 397 * Instruction.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetInstructionsResult
    {
        public global::System.String? Instruction { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseCreatedResult : global::System.IEquatable<CourseCreatedResult>, ICourseCreatedResult
    {
        public CourseCreatedResult(global::GraphQLDemo.Client.ICourseCreated_CourseCreated? courseCreated)
        {
            CourseCreated = courseCreated;
        }

        public global::GraphQLDemo.Client.ICourseCreated_CourseCreated? CourseCreated { get; }

        public virtual global::System.Boolean Equals(CourseCreatedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CourseCreated is null && other.CourseCreated is null) || CourseCreated != null && CourseCreated.Equals(other.CourseCreated)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseCreatedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CourseCreated != null)
                {
                    hash ^= 397 * CourseCreated.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseCreated_CourseCreated_CourseNames : global::System.IEquatable<CourseCreated_CourseCreated_CourseNames>, ICourseCreated_CourseCreated_CourseNames
    {
        public CourseCreated_CourseCreated_CourseNames(global::System.Guid id, global::System.String? courseName, global::System.Int32 courseFee)
        {
            Id = id;
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }

        public virtual global::System.Boolean Equals(CourseCreated_CourseCreated_CourseNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName)) && CourseFee == other.CourseFee;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseCreated_CourseCreated_CourseNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                hash ^= 397 * CourseFee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICourseCreatedResult
    {
        public global::GraphQLDemo.Client.ICourseCreated_CourseCreated? CourseCreated { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICourseCreated_CourseCreated
    {
        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICourseCreated_CourseCreated_CourseNames : ICourseCreated_CourseCreated
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseUpdatedResult : global::System.IEquatable<CourseUpdatedResult>, ICourseUpdatedResult
    {
        public CourseUpdatedResult(global::GraphQLDemo.Client.ICourseUpdated_CourseUpdated? courseUpdated)
        {
            CourseUpdated = courseUpdated;
        }

        public global::GraphQLDemo.Client.ICourseUpdated_CourseUpdated? CourseUpdated { get; }

        public virtual global::System.Boolean Equals(CourseUpdatedResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CourseUpdated is null && other.CourseUpdated is null) || CourseUpdated != null && CourseUpdated.Equals(other.CourseUpdated)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseUpdatedResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CourseUpdated != null)
                {
                    hash ^= 397 * CourseUpdated.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseUpdated_CourseUpdated_CourseNames : global::System.IEquatable<CourseUpdated_CourseUpdated_CourseNames>, ICourseUpdated_CourseUpdated_CourseNames
    {
        public CourseUpdated_CourseUpdated_CourseNames(global::System.Guid id, global::System.String? courseName, global::System.Int32 courseFee)
        {
            Id = id;
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }

        public virtual global::System.Boolean Equals(CourseUpdated_CourseUpdated_CourseNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName)) && CourseFee == other.CourseFee;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseUpdated_CourseUpdated_CourseNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                hash ^= 397 * CourseFee.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICourseUpdatedResult
    {
        public global::GraphQLDemo.Client.ICourseUpdated_CourseUpdated? CourseUpdated { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICourseUpdated_CourseUpdated
    {
        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICourseUpdated_CourseUpdated_CourseNames : ICourseUpdated_CourseUpdated
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseNamesInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "CourseNamesInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::GraphQLDemo.Client.CourseNamesInput;
            var inputInfo = runtimeValue as global::GraphQLDemo.Client.State.ICourseNamesInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsCourseNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("courseName", FormatCourseName(input.CourseName)));
            }

            if (inputInfo.IsCourseFeeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("courseFee", FormatCourseFee(input.CourseFee)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::System.Guid input)
        {
            return _uUIDFormatter.Format(input);
        }

        private global::System.Object? FormatCourseName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCourseFee(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseNamesInput : global::GraphQLDemo.Client.State.ICourseNamesInputInfo, global::System.IEquatable<CourseNamesInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseNamesInput)obj);
        }

        public virtual global::System.Boolean Equals(CourseNamesInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName)) && CourseFee == other.CourseFee;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                hash ^= 397 * CourseFee.GetHashCode();
                return hash;
            }
        }

        private global::System.Guid _value_id;
        private global::System.Boolean _set_id;
        private global::System.String? _value_courseName;
        private global::System.Boolean _set_courseName;
        private global::System.Int32 _value_courseFee;
        private global::System.Boolean _set_courseFee;
        public global::System.Guid Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::GraphQLDemo.Client.State.ICourseNamesInputInfo.IsIdSet => _set_id;
        public global::System.String? CourseName
        {
            get => _value_courseName;
            set
            {
                _set_courseName = true;
                _value_courseName = value;
            }
        }

        global::System.Boolean global::GraphQLDemo.Client.State.ICourseNamesInputInfo.IsCourseNameSet => _set_courseName;
        public global::System.Int32 CourseFee
        {
            get => _value_courseFee;
            set
            {
                _set_courseFee = true;
                _value_courseFee = value;
            }
        }

        global::System.Boolean global::GraphQLDemo.Client.State.ICourseNamesInputInfo.IsCourseFeeSet => _set_courseFee;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseNamesSortInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _sortEnumTypeFormatter = default !;
        public global::System.String TypeName => "CourseNamesSortInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _sortEnumTypeFormatter = serializerResolver.GetInputValueFormatter("SortEnumType");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::GraphQLDemo.Client.CourseNamesSortInput;
            var inputInfo = runtimeValue as global::GraphQLDemo.Client.State.ICourseNamesSortInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsCourseNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("courseName", FormatCourseName(input.CourseName)));
            }

            if (inputInfo.IsCourseFeeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("courseFee", FormatCourseFee(input.CourseFee)));
            }

            return fields;
        }

        private global::System.Object? FormatId(global::GraphQLDemo.Client.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCourseName(global::GraphQLDemo.Client.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCourseFee(global::GraphQLDemo.Client.SortEnumType? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _sortEnumTypeFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseNamesSortInput : global::GraphQLDemo.Client.State.ICourseNamesSortInputInfo, global::System.IEquatable<CourseNamesSortInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CourseNamesSortInput)obj);
        }

        public virtual global::System.Boolean Equals(CourseNamesSortInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id))) && ((CourseName is null && other.CourseName is null) || CourseName != null && CourseName.Equals(other.CourseName)) && ((CourseFee is null && other.CourseFee is null) || CourseFee != null && CourseFee.Equals(other.CourseFee));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (CourseName != null)
                {
                    hash ^= 397 * CourseName.GetHashCode();
                }

                if (CourseFee != null)
                {
                    hash ^= 397 * CourseFee.GetHashCode();
                }

                return hash;
            }
        }

        private global::GraphQLDemo.Client.SortEnumType? _value_id;
        private global::System.Boolean _set_id;
        private global::GraphQLDemo.Client.SortEnumType? _value_courseName;
        private global::System.Boolean _set_courseName;
        private global::GraphQLDemo.Client.SortEnumType? _value_courseFee;
        private global::System.Boolean _set_courseFee;
        public global::GraphQLDemo.Client.SortEnumType? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::GraphQLDemo.Client.State.ICourseNamesSortInputInfo.IsIdSet => _set_id;
        public global::GraphQLDemo.Client.SortEnumType? CourseName
        {
            get => _value_courseName;
            set
            {
                _set_courseName = true;
                _value_courseName = value;
            }
        }

        global::System.Boolean global::GraphQLDemo.Client.State.ICourseNamesSortInputInfo.IsCourseNameSet => _set_courseName;
        public global::GraphQLDemo.Client.SortEnumType? CourseFee
        {
            get => _value_courseFee;
            set
            {
                _set_courseFee = true;
                _value_courseFee = value;
            }
        }

        global::System.Boolean global::GraphQLDemo.Client.State.ICourseNamesSortInputInfo.IsCourseFeeSet => _set_courseFee;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public enum SortEnumType
    {
        Asc,
        Desc
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class SortEnumTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, SortEnumType>
    {
        public global::System.String TypeName => "SortEnumType";
        public SortEnumType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
            "ASC" => SortEnumType.Asc, "DESC" => SortEnumType.Desc, _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
            SortEnumType.Asc => "ASC", SortEnumType.Desc => "DESC", _ => throw new global::StrawberryShake.GraphQLClientException()}

            ;
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCourse GraphQL operation
    /// <code>
    /// mutation CreateCourse($courseInput: CourseNamesInput) {
    ///   createCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CreateCourseMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateCourseMutationDocument()
        {
        }

        public static CreateCourseMutationDocument Instance { get; } = new CreateCourseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x46, 0x65, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "5d28a071955201966301aa59e6b276d5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCourse GraphQL operation
    /// <code>
    /// mutation CreateCourse($courseInput: CourseNamesInput) {
    ///   createCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CreateCourseMutation : global::GraphQLDemo.Client.ICreateCourseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateCourseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseNamesInputFormatter;
        public CreateCourseMutation(global::StrawberryShake.IOperationExecutor<ICreateCourseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _courseNamesInputFormatter = serializerResolver.GetInputValueFormatter("CourseNamesInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateCourseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCourseResult>> ExecuteAsync(global::GraphQLDemo.Client.CourseNamesInput? courseInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(courseInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCourseResult>> Watch(global::GraphQLDemo.Client.CourseNamesInput? courseInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(courseInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::GraphQLDemo.Client.CourseNamesInput? courseInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("courseInput", FormatCourseInput(courseInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateCourseMutationDocument.Instance.Hash.Value, name: "CreateCourse", document: CreateCourseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCourseInput(global::GraphQLDemo.Client.CourseNamesInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _courseNamesInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCourse GraphQL operation
    /// <code>
    /// mutation CreateCourse($courseInput: CourseNamesInput) {
    ///   createCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICreateCourseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCourseResult>> ExecuteAsync(global::GraphQLDemo.Client.CourseNamesInput? courseInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCourseResult>> Watch(global::GraphQLDemo.Client.CourseNamesInput? courseInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteCourse GraphQL operation
    /// <code>
    /// mutation DeleteCourse($id: UUID!) {
    ///   deleteCourse(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class DeleteCourseMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteCourseMutationDocument()
        {
        }

        public static DeleteCourseMutationDocument Instance { get; } = new DeleteCourseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "cba0f52afdcb6c6b64d7322d16f9d29c");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteCourse GraphQL operation
    /// <code>
    /// mutation DeleteCourse($id: UUID!) {
    ///   deleteCourse(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class DeleteCourseMutation : global::GraphQLDemo.Client.IDeleteCourseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteCourseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public DeleteCourseMutation(global::StrawberryShake.IOperationExecutor<IDeleteCourseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteCourseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteCourseResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteCourseResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteCourseMutationDocument.Instance.Hash.Value, name: "DeleteCourse", document: DeleteCourseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteCourse GraphQL operation
    /// <code>
    /// mutation DeleteCourse($id: UUID!) {
    ///   deleteCourse(id: $id)
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IDeleteCourseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteCourseResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteCourseResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourse GraphQL operation
    /// <code>
    /// mutation UpdateCourse($courseInput: CourseNamesInput) {
    ///   updateCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class UpdateCourseMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateCourseMutationDocument()
        {
        }

        public static UpdateCourseMutationDocument Instance { get; } = new UpdateCourseMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x46, 0x65, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "ddf9002021d6321e56e51855c83e11e5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourse GraphQL operation
    /// <code>
    /// mutation UpdateCourse($courseInput: CourseNamesInput) {
    ///   updateCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class UpdateCourseMutation : global::GraphQLDemo.Client.IUpdateCourseMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateCourseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseNamesInputFormatter;
        public UpdateCourseMutation(global::StrawberryShake.IOperationExecutor<IUpdateCourseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _courseNamesInputFormatter = serializerResolver.GetInputValueFormatter("CourseNamesInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateCourseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCourseResult>> ExecuteAsync(global::GraphQLDemo.Client.CourseNamesInput? courseInput, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(courseInput);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCourseResult>> Watch(global::GraphQLDemo.Client.CourseNamesInput? courseInput, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(courseInput);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::GraphQLDemo.Client.CourseNamesInput? courseInput)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("courseInput", FormatCourseInput(courseInput));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateCourseMutationDocument.Instance.Hash.Value, name: "UpdateCourse", document: UpdateCourseMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCourseInput(global::GraphQLDemo.Client.CourseNamesInput? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _courseNamesInputFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateCourse GraphQL operation
    /// <code>
    /// mutation UpdateCourse($courseInput: CourseNamesInput) {
    ///   updateCourse(courseInput: $courseInput) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IUpdateCourseMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCourseResult>> ExecuteAsync(global::GraphQLDemo.Client.CourseNamesInput? courseInput, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCourseResult>> Watch(global::GraphQLDemo.Client.CourseNamesInput? courseInput, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PaginatedCourse GraphQL operation
    /// <code>
    /// query PaginatedCourse($first: Int, $after: String, $last: Int, $before: String, $order: [CourseNamesSortInput!]) {
    ///   paginatedCourses(first: $first, last: $last, before: $before, after: $after, order: $order) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       courseName
    ///       courseFee
    ///       ... on CourseNames {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourseQueryDocument : global::StrawberryShake.IDocument
    {
        private PaginatedCourseQueryDocument()
        {
        }

        public static PaginatedCourseQueryDocument Instance { get; } = new PaginatedCourseQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x28, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x2c, 0x20, 0x24, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x5b, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x5d, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x72, 0x73, 0x74, 0x2c, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x6c, 0x61, 0x73, 0x74, 0x2c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x3a, 0x20, 0x24, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x46, 0x65, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "05ac34e8b1679b911c80d7ce895f5fa2");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PaginatedCourse GraphQL operation
    /// <code>
    /// query PaginatedCourse($first: Int, $after: String, $last: Int, $before: String, $order: [CourseNamesSortInput!]) {
    ///   paginatedCourses(first: $first, last: $last, before: $before, after: $after, order: $order) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       courseName
    ///       courseFee
    ///       ... on CourseNames {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourseQuery : global::GraphQLDemo.Client.IPaginatedCourseQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPaginatedCourseResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _courseNamesSortInputFormatter;
        public PaginatedCourseQuery(global::StrawberryShake.IOperationExecutor<IPaginatedCourseResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _courseNamesSortInputFormatter = serializerResolver.GetInputValueFormatter("CourseNamesSortInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPaginatedCourseResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPaginatedCourseResult>> ExecuteAsync(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.CourseNamesSortInput>? order, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(first, after, last, before, order);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPaginatedCourseResult>> Watch(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.CourseNamesSortInput>? order, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(first, after, last, before, order);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.CourseNamesSortInput>? order)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("first", FormatFirst(first));
            variables.Add("after", FormatAfter(after));
            variables.Add("last", FormatLast(last));
            variables.Add("before", FormatBefore(before));
            variables.Add("order", FormatOrder(order));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PaginatedCourseQueryDocument.Instance.Hash.Value, name: "PaginatedCourse", document: PaginatedCourseQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFirst(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatAfter(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatLast(global::System.Int32? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _intFormatter.Format(value);
            }
        }

        private global::System.Object? FormatBefore(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatOrder(global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.CourseNamesSortInput>? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                var value_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var value_elm in value)
                {
                    if (value_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(value_elm));
                    }

                    value_list.Add(_courseNamesSortInputFormatter.Format(value_elm));
                }

                return value_list;
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PaginatedCourse GraphQL operation
    /// <code>
    /// query PaginatedCourse($first: Int, $after: String, $last: Int, $before: String, $order: [CourseNamesSortInput!]) {
    ///   paginatedCourses(first: $first, last: $last, before: $before, after: $after, order: $order) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       id
    ///       courseName
    ///       courseFee
    ///       ... on CourseNames {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       startCursor
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///     }
    ///     totalCount
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IPaginatedCourseQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPaginatedCourseResult>> ExecuteAsync(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.CourseNamesSortInput>? order, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPaginatedCourseResult>> Watch(global::System.Int32? first, global::System.String? after, global::System.Int32? last, global::System.String? before, global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.CourseNamesSortInput>? order, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCourseNameById GraphQL operation
    /// <code>
    /// query GetCourseNameById($id: UUID!) {
    ///   courseNameById(id: $id) {
    ///     __typename
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourseNameByIdQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCourseNameByIdQueryDocument()
        {
        }

        public static GetCourseNameByIdQueryDocument Instance { get; } = new GetCourseNameByIdQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x46, 0x65, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b8380d4c2bc4b66a9a67b8991936e1ba");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourseNameById GraphQL operation
    /// <code>
    /// query GetCourseNameById($id: UUID!) {
    ///   courseNameById(id: $id) {
    ///     __typename
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourseNameByIdQuery : global::GraphQLDemo.Client.IGetCourseNameByIdQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCourseNameByIdResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public GetCourseNameByIdQuery(global::StrawberryShake.IOperationExecutor<IGetCourseNameByIdResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCourseNameByIdResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseNameByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseNameByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCourseNameByIdQueryDocument.Instance.Hash.Value, name: "GetCourseNameById", document: GetCourseNameByIdQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourseNameById GraphQL operation
    /// <code>
    /// query GetCourseNameById($id: UUID!) {
    ///   courseNameById(id: $id) {
    ///     __typename
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCourseNameByIdQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCourseNameByIdResult>> ExecuteAsync(global::System.Guid id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCourseNameByIdResult>> Watch(global::System.Guid id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetCourses GraphQL operation
    /// <code>
    /// query GetCourses {
    ///   courses {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseType {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCoursesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCoursesQueryDocument()
        {
        }

        public static GetCoursesQueryDocument Instance { get; } = new GetCoursesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x46, 0x65, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "98af1ed0680a812665dc509ab9a247fd");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourses GraphQL operation
    /// <code>
    /// query GetCourses {
    ///   courses {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseType {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCoursesQuery : global::GraphQLDemo.Client.IGetCoursesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCoursesResult> _operationExecutor;
        public GetCoursesQuery(global::StrawberryShake.IOperationExecutor<IGetCoursesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCoursesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCoursesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCoursesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCoursesQueryDocument.Instance.Hash.Value, name: "GetCourses", document: GetCoursesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCourses GraphQL operation
    /// <code>
    /// query GetCourses {
    ///   courses {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseType {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetCoursesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCoursesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCoursesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetInstructions GraphQL operation
    /// <code>
    /// query GetInstructions {
    ///   instruction
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetInstructionsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetInstructionsQueryDocument()
        {
        }

        public static GetInstructionsQueryDocument Instance { get; } = new GetInstructionsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "e5d5ef5f88ee9a7af94fe7071467f376");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetInstructions GraphQL operation
    /// <code>
    /// query GetInstructions {
    ///   instruction
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetInstructionsQuery : global::GraphQLDemo.Client.IGetInstructionsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetInstructionsResult> _operationExecutor;
        public GetInstructionsQuery(global::StrawberryShake.IOperationExecutor<IGetInstructionsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetInstructionsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetInstructionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetInstructionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetInstructionsQueryDocument.Instance.Hash.Value, name: "GetInstructions", document: GetInstructionsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetInstructions GraphQL operation
    /// <code>
    /// query GetInstructions {
    ///   instruction
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGetInstructionsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetInstructionsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetInstructionsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CourseCreated GraphQL operation
    /// <code>
    /// subscription CourseCreated {
    ///   courseCreated {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseCreatedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private CourseCreatedSubscriptionDocument()
        {
        }

        public static CourseCreatedSubscriptionDocument Instance { get; } = new CourseCreatedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x46, 0x65, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "72a32f497137892e8f944298570f3b3d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CourseCreated GraphQL operation
    /// <code>
    /// subscription CourseCreated {
    ///   courseCreated {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseCreatedSubscription : global::GraphQLDemo.Client.ICourseCreatedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICourseCreatedResult> _operationExecutor;
        public CourseCreatedSubscription(global::StrawberryShake.IOperationExecutor<ICourseCreatedResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICourseCreatedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICourseCreatedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CourseCreatedSubscriptionDocument.Instance.Hash.Value, name: "CourseCreated", document: CourseCreatedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the CourseCreated GraphQL operation
    /// <code>
    /// subscription CourseCreated {
    ///   courseCreated {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICourseCreatedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICourseCreatedResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CourseUpdated GraphQL operation
    /// <code>
    /// subscription CourseUpdated($courseId: UUID!) {
    ///   courseUpdated(courseId: $courseId) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseUpdatedSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private CourseUpdatedSubscriptionDocument()
        {
        }

        public static CourseUpdatedSubscriptionDocument Instance { get; } = new CourseUpdatedSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x28, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x55, 0x55, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x28, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x46, 0x65, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "051ced104505cee8201b0430d580f226");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CourseUpdated GraphQL operation
    /// <code>
    /// subscription CourseUpdated($courseId: UUID!) {
    ///   courseUpdated(courseId: $courseId) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseUpdatedSubscription : global::GraphQLDemo.Client.ICourseUpdatedSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICourseUpdatedResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _uUIDFormatter;
        public CourseUpdatedSubscription(global::StrawberryShake.IOperationExecutor<ICourseUpdatedResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _uUIDFormatter = serializerResolver.GetInputValueFormatter("UUID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICourseUpdatedResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICourseUpdatedResult>> Watch(global::System.Guid courseId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(courseId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Guid courseId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("courseId", FormatCourseId(courseId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CourseUpdatedSubscriptionDocument.Instance.Hash.Value, name: "CourseUpdated", document: CourseUpdatedSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCourseId(global::System.Guid value)
        {
            return _uUIDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CourseUpdated GraphQL operation
    /// <code>
    /// subscription CourseUpdated($courseId: UUID!) {
    ///   courseUpdated(courseId: $courseId) {
    ///     __typename
    ///     id
    ///     courseName
    ///     courseFee
    ///     ... on CourseNames {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface ICourseUpdatedSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICourseUpdatedResult>> Watch(global::System.Guid courseId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GraphQLDemoClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GraphQLDemoClient : global::GraphQLDemo.Client.IGraphQLDemoClient
    {
        private readonly global::GraphQLDemo.Client.ICreateCourseMutation _createCourse;
        private readonly global::GraphQLDemo.Client.IDeleteCourseMutation _deleteCourse;
        private readonly global::GraphQLDemo.Client.IUpdateCourseMutation _updateCourse;
        private readonly global::GraphQLDemo.Client.IPaginatedCourseQuery _paginatedCourse;
        private readonly global::GraphQLDemo.Client.IGetCourseNameByIdQuery _getCourseNameById;
        private readonly global::GraphQLDemo.Client.IGetCoursesQuery _getCourses;
        private readonly global::GraphQLDemo.Client.IGetInstructionsQuery _getInstructions;
        private readonly global::GraphQLDemo.Client.ICourseCreatedSubscription _courseCreated;
        private readonly global::GraphQLDemo.Client.ICourseUpdatedSubscription _courseUpdated;
        public GraphQLDemoClient(global::GraphQLDemo.Client.ICreateCourseMutation createCourse, global::GraphQLDemo.Client.IDeleteCourseMutation deleteCourse, global::GraphQLDemo.Client.IUpdateCourseMutation updateCourse, global::GraphQLDemo.Client.IPaginatedCourseQuery paginatedCourse, global::GraphQLDemo.Client.IGetCourseNameByIdQuery getCourseNameById, global::GraphQLDemo.Client.IGetCoursesQuery getCourses, global::GraphQLDemo.Client.IGetInstructionsQuery getInstructions, global::GraphQLDemo.Client.ICourseCreatedSubscription courseCreated, global::GraphQLDemo.Client.ICourseUpdatedSubscription courseUpdated)
        {
            _createCourse = createCourse ?? throw new global::System.ArgumentNullException(nameof(createCourse));
            _deleteCourse = deleteCourse ?? throw new global::System.ArgumentNullException(nameof(deleteCourse));
            _updateCourse = updateCourse ?? throw new global::System.ArgumentNullException(nameof(updateCourse));
            _paginatedCourse = paginatedCourse ?? throw new global::System.ArgumentNullException(nameof(paginatedCourse));
            _getCourseNameById = getCourseNameById ?? throw new global::System.ArgumentNullException(nameof(getCourseNameById));
            _getCourses = getCourses ?? throw new global::System.ArgumentNullException(nameof(getCourses));
            _getInstructions = getInstructions ?? throw new global::System.ArgumentNullException(nameof(getInstructions));
            _courseCreated = courseCreated ?? throw new global::System.ArgumentNullException(nameof(courseCreated));
            _courseUpdated = courseUpdated ?? throw new global::System.ArgumentNullException(nameof(courseUpdated));
        }

        public static global::System.String ClientName => "GraphQLDemoClient";
        public global::GraphQLDemo.Client.ICreateCourseMutation CreateCourse => _createCourse;
        public global::GraphQLDemo.Client.IDeleteCourseMutation DeleteCourse => _deleteCourse;
        public global::GraphQLDemo.Client.IUpdateCourseMutation UpdateCourse => _updateCourse;
        public global::GraphQLDemo.Client.IPaginatedCourseQuery PaginatedCourse => _paginatedCourse;
        public global::GraphQLDemo.Client.IGetCourseNameByIdQuery GetCourseNameById => _getCourseNameById;
        public global::GraphQLDemo.Client.IGetCoursesQuery GetCourses => _getCourses;
        public global::GraphQLDemo.Client.IGetInstructionsQuery GetInstructions => _getInstructions;
        public global::GraphQLDemo.Client.ICourseCreatedSubscription CourseCreated => _courseCreated;
        public global::GraphQLDemo.Client.ICourseUpdatedSubscription CourseUpdated => _courseUpdated;
    }

    /// <summary>
    /// Represents the GraphQLDemoClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial interface IGraphQLDemoClient
    {
        global::GraphQLDemo.Client.ICreateCourseMutation CreateCourse { get; }

        global::GraphQLDemo.Client.IDeleteCourseMutation DeleteCourse { get; }

        global::GraphQLDemo.Client.IUpdateCourseMutation UpdateCourse { get; }

        global::GraphQLDemo.Client.IPaginatedCourseQuery PaginatedCourse { get; }

        global::GraphQLDemo.Client.IGetCourseNameByIdQuery GetCourseNameById { get; }

        global::GraphQLDemo.Client.IGetCoursesQuery GetCourses { get; }

        global::GraphQLDemo.Client.IGetInstructionsQuery GetInstructions { get; }

        global::GraphQLDemo.Client.ICourseCreatedSubscription CourseCreated { get; }

        global::GraphQLDemo.Client.ICourseUpdatedSubscription CourseUpdated { get; }
    }
}

namespace GraphQLDemo.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseNamesEntity
    {
        public CourseNamesEntity(global::System.Guid id = default !, global::System.String? courseName = default !, global::System.Int32 courseFee = default !)
        {
            Id = id;
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseTypeEntity
    {
        public CourseTypeEntity(global::System.Guid id = default !, global::System.String? courseName = default !, global::System.Int32 courseFee = default !)
        {
            Id = id;
            CourseName = courseName;
            CourseFee = courseFee;
        }

        public global::System.Guid Id { get; }

        public global::System.String? CourseName { get; }

        public global::System.Int32 CourseFee { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CreateCourseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.CreateCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CreateCourse_CreateCourse_CourseNames> _createCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper;
        public CreateCourseResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CreateCourse_CreateCourse_CourseNames> createCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _createCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper = createCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(createCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.ICreateCourseResult);
        public CreateCourseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateCourseResultInfo info)
            {
                return new CreateCourseResult(MapICreateCourse_CreateCourse(info.CreateCourse, snapshot));
            }

            throw new global::System.ArgumentException("CreateCourseResultInfo expected.");
        }

        private global::GraphQLDemo.Client.ICreateCourse_CreateCourse? MapICreateCourse_CreateCourse(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                return _createCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper.Map(snapshot.GetEntity<global::GraphQLDemo.Client.State.CourseNamesEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CreateCourseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateCourseResultInfo(global::StrawberryShake.EntityId? createCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateCourse = createCourse;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? CreateCourse { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateCourseResultInfo(CreateCourse, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CreateCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CreateCourse_CreateCourse_CourseNames>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CreateCourse_CreateCourse_CourseNames Map(global::GraphQLDemo.Client.State.CourseNamesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CreateCourse_CreateCourse_CourseNames(entity.Id, entity.CourseName, entity.CourseFee);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class DeleteCourseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.DeleteCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteCourseResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.IDeleteCourseResult);
        public DeleteCourseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteCourseResultInfo info)
            {
                return new DeleteCourseResult(info.DeleteCourse);
            }

            throw new global::System.ArgumentException("DeleteCourseResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class DeleteCourseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteCourseResultInfo(global::System.Boolean deleteCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DeleteCourse = deleteCourse;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Boolean DeleteCourse { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteCourseResultInfo(DeleteCourse, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class UpdateCourseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.UpdateCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, UpdateCourse_UpdateCourse_CourseNames> _updateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper;
        public UpdateCourseResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, UpdateCourse_UpdateCourse_CourseNames> updateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _updateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper = updateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(updateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.IUpdateCourseResult);
        public UpdateCourseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateCourseResultInfo info)
            {
                return new UpdateCourseResult(MapIUpdateCourse_UpdateCourse(info.UpdateCourse, snapshot));
            }

            throw new global::System.ArgumentException("UpdateCourseResultInfo expected.");
        }

        private global::GraphQLDemo.Client.IUpdateCourse_UpdateCourse? MapIUpdateCourse_UpdateCourse(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                return _updateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper.Map(snapshot.GetEntity<global::GraphQLDemo.Client.State.CourseNamesEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class UpdateCourseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateCourseResultInfo(global::StrawberryShake.EntityId? updateCourse, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            UpdateCourse = updateCourse;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? UpdateCourse { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateCourseResultInfo(UpdateCourse, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class UpdateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, UpdateCourse_UpdateCourse_CourseNames>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public UpdateCourse_UpdateCourse_CourseNames Map(global::GraphQLDemo.Client.State.CourseNamesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new UpdateCourse_UpdateCourse_CourseNames(entity.Id, entity.CourseName, entity.CourseFee);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourseResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.PaginatedCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, PaginatedCourse_PaginatedCourses_Nodes_CourseNames> _paginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper;
        public PaginatedCourseResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, PaginatedCourse_PaginatedCourses_Nodes_CourseNames> paginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _paginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper = paginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(paginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.IPaginatedCourseResult);
        public PaginatedCourseResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PaginatedCourseResultInfo info)
            {
                return new PaginatedCourseResult(MapIPaginatedCourse_PaginatedCourses(info.PaginatedCourses, snapshot));
            }

            throw new global::System.ArgumentException("PaginatedCourseResultInfo expected.");
        }

        private global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses? MapIPaginatedCourse_PaginatedCourses(global::GraphQLDemo.Client.State.PaginatedCoursesConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IPaginatedCourse_PaginatedCourses returnValue = default !;
            if (data?.__typename.Equals("PaginatedCoursesConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new PaginatedCourse_PaginatedCourses_PaginatedCoursesConnection(MapIPaginatedCourse_PaginatedCourses_NodesArray(data.Nodes, snapshot), MapNonNullableIPaginatedCourse_PaginatedCourses_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot), data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_Nodes?>? MapIPaginatedCourse_PaginatedCourses_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var courseNamess = new global::System.Collections.Generic.List<global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_Nodes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                courseNamess.Add(MapIPaginatedCourse_PaginatedCourses_Nodes(child, snapshot));
            }

            return courseNamess;
        }

        private global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_Nodes? MapIPaginatedCourse_PaginatedCourses_Nodes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                return _paginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper.Map(snapshot.GetEntity<global::GraphQLDemo.Client.State.CourseNamesEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::GraphQLDemo.Client.IPaginatedCourse_PaginatedCourses_PageInfo MapNonNullableIPaginatedCourse_PaginatedCourses_PageInfo(global::GraphQLDemo.Client.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPaginatedCourse_PaginatedCourses_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new PaginatedCourse_PaginatedCourses_PageInfo_PageInfo(data.StartCursor, data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourseResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PaginatedCourseResultInfo(global::GraphQLDemo.Client.State.PaginatedCoursesConnectionData? paginatedCourses, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PaginatedCourses = paginatedCourses;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::GraphQLDemo.Client.State.PaginatedCoursesConnectionData? PaginatedCourses { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PaginatedCourseResultInfo(PaginatedCourses, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, PaginatedCourse_PaginatedCourses_Nodes_CourseNames>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PaginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PaginatedCourse_PaginatedCourses_Nodes_CourseNames Map(global::GraphQLDemo.Client.State.CourseNamesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PaginatedCourse_PaginatedCourses_Nodes_CourseNames(entity.Id, entity.CourseName, entity.CourseFee);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourseNameByIdResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.GetCourseNameByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, GetCourseNameById_CourseNameById_CourseNames> _getCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper;
        public GetCourseNameByIdResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, GetCourseNameById_CourseNameById_CourseNames> getCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper = getCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.IGetCourseNameByIdResult);
        public GetCourseNameByIdResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCourseNameByIdResultInfo info)
            {
                return new GetCourseNameByIdResult(MapIGetCourseNameById_CourseNameById(info.CourseNameById, snapshot));
            }

            throw new global::System.ArgumentException("GetCourseNameByIdResultInfo expected.");
        }

        private global::GraphQLDemo.Client.IGetCourseNameById_CourseNameById? MapIGetCourseNameById_CourseNameById(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                return _getCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper.Map(snapshot.GetEntity<global::GraphQLDemo.Client.State.CourseNamesEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourseNameByIdResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCourseNameByIdResultInfo(global::StrawberryShake.EntityId? courseNameById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CourseNameById = courseNameById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? CourseNameById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCourseNameByIdResultInfo(CourseNameById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, GetCourseNameById_CourseNameById_CourseNames>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCourseNameById_CourseNameById_CourseNames Map(global::GraphQLDemo.Client.State.CourseNamesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCourseNameById_CourseNameById_CourseNames(entity.CourseName, entity.CourseFee);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCoursesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.GetCoursesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseTypeEntity, GetCourses_Courses_CourseType> _getCourses_Courses_CourseTypeFromCourseTypeEntityMapper;
        public GetCoursesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseTypeEntity, GetCourses_Courses_CourseType> getCourses_Courses_CourseTypeFromCourseTypeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCourses_Courses_CourseTypeFromCourseTypeEntityMapper = getCourses_Courses_CourseTypeFromCourseTypeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCourses_Courses_CourseTypeFromCourseTypeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.IGetCoursesResult);
        public GetCoursesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCoursesResultInfo info)
            {
                return new GetCoursesResult(MapIGetCourses_CoursesArray(info.Courses, snapshot));
            }

            throw new global::System.ArgumentException("GetCoursesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::GraphQLDemo.Client.IGetCourses_Courses?>? MapIGetCourses_CoursesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var courseTypes = new global::System.Collections.Generic.List<global::GraphQLDemo.Client.IGetCourses_Courses?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                courseTypes.Add(MapIGetCourses_Courses(child, snapshot));
            }

            return courseTypes;
        }

        private global::GraphQLDemo.Client.IGetCourses_Courses? MapIGetCourses_Courses(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CourseType", global::System.StringComparison.Ordinal))
            {
                return _getCourses_Courses_CourseTypeFromCourseTypeEntityMapper.Map(snapshot.GetEntity<global::GraphQLDemo.Client.State.CourseTypeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCoursesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCoursesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? courses, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Courses = courses;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Courses { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCoursesResultInfo(Courses, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourses_Courses_CourseTypeFromCourseTypeEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseTypeEntity, GetCourses_Courses_CourseType>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCourses_Courses_CourseTypeFromCourseTypeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCourses_Courses_CourseType Map(global::GraphQLDemo.Client.State.CourseTypeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCourses_Courses_CourseType(entity.Id, entity.CourseName, entity.CourseFee);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetInstructionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.GetInstructionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetInstructionsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.IGetInstructionsResult);
        public GetInstructionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetInstructionsResultInfo info)
            {
                return new GetInstructionsResult(info.Instruction);
            }

            throw new global::System.ArgumentException("GetInstructionsResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetInstructionsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetInstructionsResultInfo(global::System.String? instruction, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Instruction = instruction;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.String? Instruction { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetInstructionsResultInfo(Instruction, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseCreatedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.CourseCreatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CourseCreated_CourseCreated_CourseNames> _courseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper;
        public CourseCreatedResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CourseCreated_CourseCreated_CourseNames> courseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _courseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper = courseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(courseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.ICourseCreatedResult);
        public CourseCreatedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CourseCreatedResultInfo info)
            {
                return new CourseCreatedResult(MapICourseCreated_CourseCreated(info.CourseCreated, snapshot));
            }

            throw new global::System.ArgumentException("CourseCreatedResultInfo expected.");
        }

        private global::GraphQLDemo.Client.ICourseCreated_CourseCreated? MapICourseCreated_CourseCreated(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                return _courseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper.Map(snapshot.GetEntity<global::GraphQLDemo.Client.State.CourseNamesEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseCreatedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CourseCreatedResultInfo(global::StrawberryShake.EntityId? courseCreated, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CourseCreated = courseCreated;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? CourseCreated { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CourseCreatedResultInfo(CourseCreated, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CourseCreated_CourseCreated_CourseNames>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CourseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CourseCreated_CourseCreated_CourseNames Map(global::GraphQLDemo.Client.State.CourseNamesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CourseCreated_CourseCreated_CourseNames(entity.Id, entity.CourseName, entity.CourseFee);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseUpdatedResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.CourseUpdatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CourseUpdated_CourseUpdated_CourseNames> _courseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper;
        public CourseUpdatedResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CourseUpdated_CourseUpdated_CourseNames> courseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _courseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper = courseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper ?? throw new global::System.ArgumentNullException(nameof(courseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::GraphQLDemo.Client.ICourseUpdatedResult);
        public CourseUpdatedResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CourseUpdatedResultInfo info)
            {
                return new CourseUpdatedResult(MapICourseUpdated_CourseUpdated(info.CourseUpdated, snapshot));
            }

            throw new global::System.ArgumentException("CourseUpdatedResultInfo expected.");
        }

        private global::GraphQLDemo.Client.ICourseUpdated_CourseUpdated? MapICourseUpdated_CourseUpdated(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                return _courseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper.Map(snapshot.GetEntity<global::GraphQLDemo.Client.State.CourseNamesEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseUpdatedResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CourseUpdatedResultInfo(global::StrawberryShake.EntityId? courseUpdated, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CourseUpdated = courseUpdated;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? CourseUpdated { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CourseUpdatedResultInfo(CourseUpdated, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper : global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, CourseUpdated_CourseUpdated_CourseNames>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CourseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CourseUpdated_CourseUpdated_CourseNames Map(global::GraphQLDemo.Client.State.CourseNamesEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CourseUpdated_CourseUpdated_CourseNames(entity.Id, entity.CourseName, entity.CourseFee);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    internal interface ICourseNamesInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsCourseNameSet { get; }

        global::System.Boolean IsCourseFeeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    internal interface ICourseNamesSortInputInfo
    {
        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsCourseNameSet { get; }

        global::System.Boolean IsCourseFeeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CreateCourseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICreateCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICreateCourseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateCourseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICreateCourseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateCourseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateCourseResult Result, CreateCourseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateCourseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateCourseResult, CreateCourseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? createCourseId = default !;
            _entityStore.Update(session =>
            {
                createCourseId = UpdateICreateCourse_CreateCourseEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createCourse"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateCourseResultInfo(createCourseId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICreateCourse_CreateCourseEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLDemo.Client.State.CourseNamesEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class DeleteCourseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IDeleteCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IDeleteCourseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeleteCourseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IDeleteCourseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteCourseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteCourseResult Result, DeleteCourseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeleteCourseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteCourseResult, DeleteCourseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteCourseResultInfo(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deleteCourse")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class UpdateCourseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IUpdateCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IUpdateCourseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public UpdateCourseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IUpdateCourseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateCourseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateCourseResult Result, UpdateCourseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUpdateCourseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateCourseResult, UpdateCourseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? updateCourseId = default !;
            _entityStore.Update(session =>
            {
                updateCourseId = UpdateIUpdateCourse_UpdateCourseEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updateCourse"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateCourseResultInfo(updateCourseId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIUpdateCourse_UpdateCourseEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLDemo.Client.State.CourseNamesEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCourseBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IPaginatedCourseResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IPaginatedCourseResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::GraphQLDemo.Client.SortEnumType> _sortEnumTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public PaginatedCourseBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IPaginatedCourseResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _sortEnumTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::GraphQLDemo.Client.SortEnumType>("SortEnumType") ?? throw new global::System.ArgumentException("No serializer for type `SortEnumType` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IPaginatedCourseResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPaginatedCourseResult Result, PaginatedCourseResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPaginatedCourseResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPaginatedCourseResult, PaginatedCourseResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::GraphQLDemo.Client.State.PaginatedCoursesConnectionData? paginatedCoursesId = default !;
            _entityStore.Update(session =>
            {
                paginatedCoursesId = DeserializeIPaginatedCourse_PaginatedCourses(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "paginatedCourses"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PaginatedCourseResultInfo(paginatedCoursesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::GraphQLDemo.Client.State.PaginatedCoursesConnectionData? DeserializeIPaginatedCourse_PaginatedCourses(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PaginatedCoursesConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLDemo.Client.State.PaginatedCoursesConnectionData(typename, nodes: UpdateIPaginatedCourse_PaginatedCourses_NodesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds), pageInfo: DeserializeNonNullableIPaginatedCourse_PaginatedCourses_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")), totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIPaginatedCourse_PaginatedCourses_NodesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var courseNamess = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                courseNamess.Add(UpdateIPaginatedCourse_PaginatedCourses_NodesEntity(session, child, entityIds));
            }

            return courseNamess;
        }

        private global::StrawberryShake.EntityId? UpdateIPaginatedCourse_PaginatedCourses_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLDemo.Client.State.CourseNamesEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::GraphQLDemo.Client.State.PageInfoData DeserializeNonNullableIPaginatedCourse_PaginatedCourses_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::GraphQLDemo.Client.State.PageInfoData(typename, startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCourseNameByIdBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetCourseNameByIdResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetCourseNameByIdResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetCourseNameByIdBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetCourseNameByIdResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCourseNameByIdResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCourseNameByIdResult Result, GetCourseNameByIdResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCourseNameByIdResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCourseNameByIdResult, GetCourseNameByIdResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? courseNameByIdId = default !;
            _entityStore.Update(session =>
            {
                courseNameByIdId = UpdateIGetCourseNameById_CourseNameByIdEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseNameById"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCourseNameByIdResultInfo(courseNameByIdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetCourseNameById_CourseNameByIdEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLDemo.Client.State.CourseNamesEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(entity.Id, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetCoursesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetCoursesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetCoursesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public GetCoursesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetCoursesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCoursesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCoursesResult Result, GetCoursesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCoursesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCoursesResult, GetCoursesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? coursesId = default !;
            _entityStore.Update(session =>
            {
                coursesId = UpdateIGetCourses_CoursesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courses"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCoursesResultInfo(coursesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetCourses_CoursesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var courseTypes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                courseTypes.Add(UpdateIGetCourses_CoursesEntity(session, child, entityIds));
            }

            return courseTypes;
        }

        private global::StrawberryShake.EntityId? UpdateIGetCourses_CoursesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseType", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLDemo.Client.State.CourseTypeEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseTypeEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseTypeEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GetInstructionsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetInstructionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetInstructionsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetInstructionsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetInstructionsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetInstructionsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetInstructionsResult Result, GetInstructionsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetInstructionsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetInstructionsResult, GetInstructionsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetInstructionsResultInfo(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "instruction")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseCreatedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICourseCreatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICourseCreatedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CourseCreatedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICourseCreatedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICourseCreatedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICourseCreatedResult Result, CourseCreatedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICourseCreatedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICourseCreatedResult, CourseCreatedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? courseCreatedId = default !;
            _entityStore.Update(session =>
            {
                courseCreatedId = UpdateICourseCreated_CourseCreatedEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseCreated"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CourseCreatedResultInfo(courseCreatedId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICourseCreated_CourseCreatedEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLDemo.Client.State.CourseNamesEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class CourseUpdatedBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICourseUpdatedResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICourseUpdatedResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CourseUpdatedBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICourseUpdatedResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICourseUpdatedResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICourseUpdatedResult Result, CourseUpdatedResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICourseUpdatedResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICourseUpdatedResult, CourseUpdatedResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? courseUpdatedId = default !;
            _entityStore.Update(session =>
            {
                courseUpdatedId = UpdateICourseUpdated_CourseUpdatedEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseUpdated"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CourseUpdatedResultInfo(courseUpdatedId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICourseUpdated_CourseUpdatedEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CourseNames", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::GraphQLDemo.Client.State.CourseNamesEntity? entity))
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::GraphQLDemo.Client.State.CourseNamesEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseName")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "courseFee"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PaginatedCoursesConnectionData
    {
        public PaginatedCoursesConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? nodes = default !, global::GraphQLDemo.Client.State.PageInfoData? pageInfo = default !, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Nodes { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::GraphQLDemo.Client.State.PageInfoData? PageInfo { get; }

        public global::System.Int32? TotalCount { get; }
    }

    ///<summary>Information about pagination in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.String? startCursor = default !, global::System.String? endCursor = default !, global::System.Boolean? hasNextPage = default !, global::System.Boolean? hasPreviousPage = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            StartCursor = startCursor;
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
        }

        public global::System.String __typename { get; }

        ///<summary>When paginating backwards, the cursor to continue.</summary>
        public global::System.String? StartCursor { get; }

        ///<summary>When paginating forwards, the cursor to continue.</summary>
        public global::System.String? EndCursor { get; }

        ///<summary>Indicates whether more edges exist following the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasNextPage { get; }

        ///<summary>Indicates whether more edges exist prior the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasPreviousPage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GraphQLDemoClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
            "CourseNames" => ParseCourseNamesEntityId(obj, __typename), "CourseType" => ParseCourseTypeEntityId(obj, __typename), _ => throw new global::System.NotSupportedException()}

            ;
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
            "CourseNames" => FormatCourseNamesEntityId(entityId), "CourseType" => FormatCourseTypeEntityId(entityId), _ => throw new global::System.NotSupportedException()}

            ;
        }

        private global::StrawberryShake.EntityId ParseCourseNamesEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCourseNamesEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCourseTypeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCourseTypeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public partial class GraphQLDemoClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GraphQLDemoClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories): base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.1.0")]
    public static partial class GraphQLDemoClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::GraphQLDemo.Client.State.GraphQLDemoClientStoreAccessor> AddGraphQLDemoClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::GraphQLDemo.Client.State.GraphQLDemoClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.CreateCourseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.DeleteCourseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.UpdateCourseMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.PaginatedCourseQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.GetCourseNameByIdQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.GetCoursesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.GetInstructionsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.CourseCreatedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.CourseUpdatedSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.GraphQLDemoClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.IGraphQLDemoClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::GraphQLDemo.Client.State.GraphQLDemoClientStoreAccessor>("GraphQLDemoClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("GraphQLDemoClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GraphQLDemoClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, global::GraphQLDemo.Client.CreateCourse_CreateCourse_CourseNames>, global::GraphQLDemo.Client.State.CreateCourse_CreateCourse_CourseNamesFromCourseNamesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, global::GraphQLDemo.Client.UpdateCourse_UpdateCourse_CourseNames>, global::GraphQLDemo.Client.State.UpdateCourse_UpdateCourse_CourseNamesFromCourseNamesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, global::GraphQLDemo.Client.PaginatedCourse_PaginatedCourses_Nodes_CourseNames>, global::GraphQLDemo.Client.State.PaginatedCourse_PaginatedCourses_Nodes_CourseNamesFromCourseNamesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, global::GraphQLDemo.Client.GetCourseNameById_CourseNameById_CourseNames>, global::GraphQLDemo.Client.State.GetCourseNameById_CourseNameById_CourseNamesFromCourseNamesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseTypeEntity, global::GraphQLDemo.Client.GetCourses_Courses_CourseType>, global::GraphQLDemo.Client.State.GetCourses_Courses_CourseTypeFromCourseTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, global::GraphQLDemo.Client.CourseCreated_CourseCreated_CourseNames>, global::GraphQLDemo.Client.State.CourseCreated_CourseCreated_CourseNamesFromCourseNamesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::GraphQLDemo.Client.State.CourseNamesEntity, global::GraphQLDemo.Client.CourseUpdated_CourseUpdated_CourseNames>, global::GraphQLDemo.Client.State.CourseUpdated_CourseUpdated_CourseNamesFromCourseNamesEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLDemo.Client.SortEnumTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLDemo.Client.CourseNamesInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::GraphQLDemo.Client.CourseNamesSortInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICreateCourseResult>, global::GraphQLDemo.Client.State.CreateCourseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICreateCourseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.ICreateCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICreateCourseResult>, global::GraphQLDemo.Client.State.CreateCourseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.ICreateCourseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICreateCourseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICreateCourseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.CreateCourseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.ICreateCourseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.CreateCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IDeleteCourseResult>, global::GraphQLDemo.Client.State.DeleteCourseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IDeleteCourseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.IDeleteCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IDeleteCourseResult>, global::GraphQLDemo.Client.State.DeleteCourseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.IDeleteCourseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IDeleteCourseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IDeleteCourseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.DeleteCourseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.IDeleteCourseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.DeleteCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IUpdateCourseResult>, global::GraphQLDemo.Client.State.UpdateCourseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IUpdateCourseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.IUpdateCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IUpdateCourseResult>, global::GraphQLDemo.Client.State.UpdateCourseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.IUpdateCourseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IUpdateCourseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IUpdateCourseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.UpdateCourseMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.IUpdateCourseMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.UpdateCourseMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IPaginatedCourseResult>, global::GraphQLDemo.Client.State.PaginatedCourseResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IPaginatedCourseResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.IPaginatedCourseQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IPaginatedCourseResult>, global::GraphQLDemo.Client.State.PaginatedCourseBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.IPaginatedCourseResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IPaginatedCourseResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IPaginatedCourseResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.PaginatedCourseQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.IPaginatedCourseQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.PaginatedCourseQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetCourseNameByIdResult>, global::GraphQLDemo.Client.State.GetCourseNameByIdResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetCourseNameByIdResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.IGetCourseNameByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetCourseNameByIdResult>, global::GraphQLDemo.Client.State.GetCourseNameByIdBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.IGetCourseNameByIdResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetCourseNameByIdResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetCourseNameByIdResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.GetCourseNameByIdQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.IGetCourseNameByIdQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.GetCourseNameByIdQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetCoursesResult>, global::GraphQLDemo.Client.State.GetCoursesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetCoursesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.IGetCoursesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetCoursesResult>, global::GraphQLDemo.Client.State.GetCoursesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.IGetCoursesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetCoursesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetCoursesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.GetCoursesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.IGetCoursesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.GetCoursesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetInstructionsResult>, global::GraphQLDemo.Client.State.GetInstructionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.IGetInstructionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.IGetInstructionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetInstructionsResult>, global::GraphQLDemo.Client.State.GetInstructionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.IGetInstructionsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetInstructionsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.IGetInstructionsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.GetInstructionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.IGetInstructionsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.GetInstructionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICourseCreatedResult>, global::GraphQLDemo.Client.State.CourseCreatedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICourseCreatedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.ICourseCreatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICourseCreatedResult>, global::GraphQLDemo.Client.State.CourseCreatedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.ICourseCreatedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICourseCreatedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICourseCreatedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.CourseCreatedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.ICourseCreatedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.CourseCreatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICourseUpdatedResult>, global::GraphQLDemo.Client.State.CourseUpdatedResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::GraphQLDemo.Client.ICourseUpdatedResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.ICourseUpdatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICourseUpdatedResult>, global::GraphQLDemo.Client.State.CourseUpdatedBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::GraphQLDemo.Client.ICourseUpdatedResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICourseUpdatedResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::GraphQLDemo.Client.ICourseUpdatedResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.CourseUpdatedSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.ICourseUpdatedSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.CourseUpdatedSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::GraphQLDemo.Client.State.GraphQLDemoClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.GraphQLDemoClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::GraphQLDemo.Client.IGraphQLDemoClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::GraphQLDemo.Client.GraphQLDemoClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
