schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  courses: [CourseType]
  paginatedCourses("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CourseNamesFilterInput order: [CourseNamesSortInput!]): PaginatedCoursesConnection
  offSetCourses(skip: Int take: Int): CourseTypeCollectionSegment
  courseNameById(id: UUID!): CourseNames
  instruction: String
}

type Mutation {
  createCourse(courseInput: CourseNamesInput): CourseNames
  updateCourse(courseInput: CourseNamesInput): CourseNames
  deleteCourse(id: UUID!): Boolean!
}

type Subscription {
  courseCreated: CourseNames
  courseUpdated(courseId: UUID!): CourseNames
}

input CourseNamesFilterInput {
  and: [CourseNamesFilterInput!]
  or: [CourseNamesFilterInput!]
  id: ComparableGuidOperationFilterInput
  courseName: StringOperationFilterInput
}

input CourseNamesSortInput {
  id: SortEnumType
  courseName: SortEnumType
  courseFee: SortEnumType
}

"A connection to a list of items."
type PaginatedCoursesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PaginatedCoursesEdge!]
  "A flattened list of the nodes."
  nodes: [CourseNames]
  totalCount: Int!
}

type CourseTypeCollectionSegment {
  items: [CourseType]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  totalCount: Int!
}

input ComparableGuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID!]
  nin: [UUID!]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum SortEnumType {
  ASC
  DESC
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type CourseNames {
  id: UUID!
  courseName: String
  courseFee: Int!
}

"An edge in a connection."
type PaginatedCoursesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CourseNames
}

type CourseType {
  dataLoaderCourse: CourseNames!
  id: UUID!
  courseName: String
  courseFee: Int!
  instructorID: UUID!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

scalar UUID

input CourseNamesInput {
  id: UUID!
  courseName: String
  courseFee: Int!
}
